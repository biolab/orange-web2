{"pageProps":{"frontmatter":{"author":"BLAZ","date":"2015-01-18 17:36:13+00:00","draft":false,"title":"Loading your data","type":"blog","blog":["data","dataloading","orange3"]},"content":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    a: \"a\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_components.p, {\n    children: [\"By a popular demand, we have just published a \", _jsx(_components.a, {\n      href: \"https://docs.biolab.si/orange/3/visual-programming/loading-your-data/index.html\",\n      children: \"tutorial\"\n    }), \" on how to load the data table into Orange. Besides its own \", _jsx(_components.a, {\n      href: \"https://docs.biolab.si/orange/3/data-mining-library/reference/data.io.html\",\n      children: \".tab format\"\n    }), \", Orange can load any tab or comma delimited data set. The details are though in writing header rows that tell Orange about the type and domain of each attribute. The \", _jsx(_components.a, {\n      href: \"https://docs.biolab.si/orange/3/visual-programming/loading-your-data/index.html\",\n      children: \"tutorial\"\n    }), \" is a step-by-step description on how to do this and how to transfer the data from popular spreadsheet programs like Excel.\"]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}},"__N_SSG":true}