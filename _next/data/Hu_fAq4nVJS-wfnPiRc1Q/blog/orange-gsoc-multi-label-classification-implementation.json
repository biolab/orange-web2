{"pageProps":{"frontmatter":{"author":"BIOLAB","date":"2011-07-20 11:35:00+00:00","draft":false,"title":"Orange GSoC: Multi-label Classification Implementation","type":"blog","blog":["gsoc","multilabel"]},"content":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    strong: \"strong\",\n    ul: \"ul\",\n    li: \"li\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.p, {\n      children: \"Multi-label classification is one of the three projects of Google Summer Code 2011 for Orange. The main goal is to extend the Orange to support multi-label, including dataset support, two basic multi-label classifications-problem-transformation methods & algorithm adaptation methods, evaluation measures, GUI support, documentation, testing, and so on.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"My name is Wencan Luo, from China. I'm very happy to work with my mentor Matija. Until now, we have finished a framework for multi-label support for Orange.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"To support multi-label data structure, a special value is added into their 'attributes' dictionary. In this way, we can know whether the attribute is a type of class without altering the old Example Table class.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Moreover, a transformation classification method to support multilabel is implemented, named Binary Relevance. All the codes are extended from the old Orange code using Python to be compatible with single-label classification methods.\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"In addition, the evaluator for multilalbel classification is also implemented based on the old single-label evaluator in \", _jsx(_components.strong, {\n        children: \"Orange.evaluator.testing\"\n      }), \" and \", _jsx(_components.strong, {\n        children: \"Orange.evaluator.scoring modules\"\n      }), \".\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"At last, the widget for Binary Relevance method and Evaluator is implemented.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Many work has to be done as following:\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"one more transformation method\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"two adaptive methods\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"ranking-based evaluator\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"widgets to support the above methods\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"testing\"\n      }), \"\\n\"]\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}},"__N_SSG":true}