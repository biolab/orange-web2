{"pageProps":{"frontmatter":{"author":"MARKO","date":"2011-12-20 12:21:00+00:00","draft":false,"title":"Orange 2.5: code conversion","blog":["orange25"],"oldUrl":"/blog/2011/12/20/orange-2-5-code-conversion/"},"content":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    strong: \"strong\",\n    a: \"a\",\n    pre: \"pre\",\n    code: \"code\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsxs(_components.p, {\n      children: [\"Orange 2.5 unifies Orange's C++ core and Python modules into a single module hierarchy. To use the new module hierarchy, import \", _jsx(_components.strong, {\n        children: \"Orange\"\n      }), \" instead of \", _jsx(_components.strong, {\n        children: \"orange\"\n      }), \" and accompanying \", _jsx(_components.strong, {\n        children: \"orng\"\n      }), \"* modules. While we will maintain backward compatibility in 2.* releases, we nevertheless suggest programmers to use the new interface. The provided \", _jsx(_components.a, {\n        href: \"http://orange.biolab.si/trac/intertrac/wiki%3AOrange25/RefactoringTool\",\n        children: \"conversion tool\"\n      }), \" can help refactor your code to use the new interface.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The conversion script, \", _jsx(_components.strong, {\n        children: \"orange2to25.py\"\n      }), \", resides in Orange's main directory. To refactor \", _jsx(_components.strong, {\n        children: \"accuracy8.py\"\n      }), \" from the \\\"Orange for beginners\\\" tutorial run\", _jsx(_components.strong, {\n        children: \"python orange2to25.py -w -o accuracy8_25.py doc/ofb-rst/code/accuracy8.py\"\n      }), \".\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"The old code\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        children: \"    import orange\\n    import orngTest, orngStat, orngTree\\n\\n    # set up the learners\\n    bayes = orange.BayesLearner()\\n    tree = orngTree.TreeLearner(mForPruning=2)\\n    bayes.name = \\\"bayes\\\"\\n    tree.name = \\\"tree\\\"\\n    learners = [bayes, tree]\\n\\n    # compute accuracies on data\\n    data = orange.ExampleTable(\\\"voting\\\")\\n    res = orngTest.crossValidation(learners, data, folds=10)\\n    cm = orngStat.computeConfusionMatrices(res,\\n            classIndex=data.domain.classVar.values.index('democrat'))\\n\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"is refactored to\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        children: \"    import Orange\\n\\n    # set up the learners\\n    bayes = Orange.classification.bayes.NaiveLearner()\\n    tree = Orange.classification.tree.TreeLearner(mForPruning=2)\\n    bayes.name = \\\"bayes\\\"\\n    tree.name = \\\"tree\\\"\\n    learners = [bayes, tree]\\n\\n    # compute accuracies on data\\n    data = Orange.data.Table(\\\"voting\\\")\\n    res = Orange.evaluation.testing.cross_validation(learners, data, folds=10)\\n    cm = Orange.evaluation.scoring.compute_confusion_matrices(res,\\n            classIndex=data.domain.classVar.values.index('democrat'))\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Read more about \", _jsx(_components.a, {\n        href: \"http://orange.biolab.si/trac/intertrac/wiki%3AOrange25/RefactoringTool\",\n        children: \"the refactoring tool on the wiki\"\n      }), \" and on the help page (\", _jsx(_components.strong, {\n        children: \"python orange2to25.py --help\"\n      }), \").\"]\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}},"thumbImage":null},"__N_SSG":true}