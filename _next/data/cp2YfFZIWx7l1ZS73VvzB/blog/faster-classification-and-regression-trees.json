{"pageProps":{"frontmatter":{"author":"BIOLAB","date":"2011-08-24 22:26:00+00:00","draft":false,"title":"Faster classification and regression trees","blog":["classification","regression","tree"],"oldUrl":"/blog/2011/08/24/faster-classification-and-regression-trees/"},"content":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    strong: \"strong\",\n    h3: \"h3\",\n    img: \"img\",\n    pre: \"pre\",\n    code: \"code\",\n    span: \"span\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsxs(_components.p, {\n      children: [_jsx(_components.strong, {\n        children: \"SimpleTreeLearner\"\n      }), \" is an implementation of classification and regression trees that sacrifices flexibility for speed. A benchmark on 42 different datasets reveals that \", _jsx(_components.strong, {\n        children: \"SimpleTreeLearner\"\n      }), \" is \", _jsx(_components.strong, {\n        children: \"11 times faster\"\n      }), \" than the original \", _jsx(_components.strong, {\n        children: \"TreeLearner\"\n      }), \".\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The motivation behind developing a new tree induction algorithm from scratch was to speed up the construction of random forests, but you can also use it as a standalone learner. \", _jsx(_components.strong, {\n        children: \"SimpleTreeLearner\"\n      }), \" uses gain ratio for classification and MSE for regression and can handle unknown values.\"]\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Comparison with TreeLearner\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The graph below shows \", _jsx(_components.strong, {\n        children: \"SimpleTreeLearner\"\n      }), \" construction times on datasets bundled with Orange normalized to \", _jsx(_components.strong, {\n        children: \"TreeLearner\"\n      }), \". Smaller is better.\"]\n    }), \"\\n\", _jsx(_components.img, {\n      src: \"/blog/2011-08-faster-classification-and-regression-trees/__optimized-images__/simpletree_speed.png__600x641_q95_crop_upscale.png\",\n      alt: \"\",\n      width: \"600\",\n      height: \"641\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"The harmonic mean (average speedup) on all the benchmarks is 11.4.\"\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Usage\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"The user can set four parameters:\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.strong, {\n        children: \"maxMajority\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Maximal proportion of majority class.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.strong, {\n        children: \"minExamples\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Minimal number of examples in leaves.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.strong, {\n        children: \"maxDepth\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Maximal depth of tree.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.strong, {\n        children: \"skipProb\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"At every split an attribute will be skipped with probability skipProb. This parameter is especially useful for building random forests.\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The code snippet below demonstrates the basic usage of \", _jsx(_components.strong, {\n        children: \"SimpleTreeLearner\"\n      }), \". It behaves much like any other Orange learner would.\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-python\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"import\"\n        }), \" Orange\\n\\ndata = Orange.data.Table(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"iris\\\"\"\n        }), \")\\n\\n\", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"# build classifier and classify train data\"\n        }), \"\\nclassifier = Orange.classification.tree.SimpleTreeLearner(data, maxMajority=\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"0.8\"\n        }), \")\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"for\"\n        }), \" ex \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"in\"\n        }), \" data:\\n    \", _jsx(_components.span, {\n          className: \"hljs-built_in\",\n          children: \"print\"\n        }), \" classifier(ex)\\n\\n\", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"# estimate classification accuracy with cross-validation\"\n        }), \"\\nlearner = Orange.classification.tree.SimpleTreeLearner(minExamples=\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"2\"\n        }), \")\\nresult = Orange.evaluation.testing.cross_validation([learner], data)\\n\", _jsx(_components.span, {\n          className: \"hljs-built_in\",\n          children: \"print\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'CA:'\"\n        }), \", Orange.evaluation.scoring.CA(result)[\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"0\"\n        }), \"]\\n\"]\n      })\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}},"thumbImage":null},"__N_SSG":true}