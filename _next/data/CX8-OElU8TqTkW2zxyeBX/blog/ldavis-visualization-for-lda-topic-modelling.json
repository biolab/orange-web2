{"pageProps":{"frontmatter":{"author":"Ajda Pretnar Žagar","date":"2022-03-18","draft":false,"title":"LDAvis: visualization for LDA topic modelling","type":"blog","thumbImage":"2022-03-18_ldavis_small.png","frontPageImage":"2022-03-18_ldavis_small.png","blog":["text mining","topic modelling","lda","visualization"],"shortExcerpt":"Text add-on now offers a way to explain topics with LDAvis.","longExcerpt":"Text add-on recently got extended with LDAvis widget, a visualization that enables exploring word frequencies in LDA-generated topics. See how to construct LDAvis pipeline in Orange.","x2images":true},"content":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    em: \"em\",\n    strong: \"strong\",\n    h4: \"h4\"\n  }, _provideComponents(), props.components), {WindowScreenshot} = _components;\n  if (!WindowScreenshot) _missingMdxReference(\"WindowScreenshot\", true);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.p, {\n      children: \"Topic modelling is a great way to uncover hidden topics in a large collection of documents. The method is extremely popular in digital humanities, so it is not just about the performance, but also the explainability.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Among topic modelling methods, many researchers still go with LDA, a generative model that observe word frequencies in the corpus and iteratively constructs a topic model for a given number of topics.\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Topic Modelling widget computes the LDA topic model. The widget also shows the top 10 words that describe each topic. We construct the below example of \", _jsx(_components.em, {\n        children: \"grimm-tales-selected\"\n      }), \", which we loaded with the \", _jsx(_components.strong, {\n        children: \"Corpus\"\n      }), \" widget. Then we preprocess the data with \", _jsx(_components.strong, {\n        children: \"Preprocess Text\"\n      }), \", where we used the default preprocessing. The most important thing is to add \", _jsx(_components.strong, {\n        children: \"Bag of Words\"\n      }), \" with the TF-IDF transform. LDA works a lot better when using this transform, as it descreases the importance of overly frequent words.\"]\n    }), \"\\n\", _jsx(WindowScreenshot, {\n      src: \"/blog/2022-03-ldavis/2022-03-18_topic-modelling.png\",\n      width: \"992\",\n      height: \"442\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"In \", _jsx(_components.strong, {\n        children: \"Topic Modelling\"\n      }), \" we use the LDA method with 10 topics. Ok, the first topic is a about animal tales, even more so the second. The fourth topic is about fish and the tenth topic probably contains the Little Red Riding Hood tale. But how frequent are grandmothers in the corpus overall? Perhaps most tales talk about grandmothers, so the top word for the tenth topic is not really informative.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"To explore the relationship between frequent and specific words in the topic, we can use LDAvis (Siever and Shirley 2014). Be careful to connect the right output to the widget. Topic Modelling outputs three things: corpus with topics, the selected topic, and all topics (topic-term matrix). We need last output for LDAvis to work.\"\n    }), \"\\n\", _jsx(WindowScreenshot, {\n      src: \"/blog/2022-03-ldavis/2022-03-18_edit-links.png\",\n      width: \"688\",\n      height: \"343\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"LDAvis shows top ranked words for each topic, weighted by relevance. Generally, topic modelling show the top N words by the word's topic probability. In other words, the more frequent is the word in the topic, the higher the word will be on the list.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Relevance defines the relationship between the word's topic probability and its lift. Lift is the ratio of the probability of the word in the topic to the probability of the word in the corpus. The more frequent is the word in the corpus, the lower will be its lift. Hence lift will expose words that appear almost exclusively in the topic.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Relevance is set to 0.5 by default, meaning there will be a balance between the probability of the word in the topic and its lift. Feel free to change the value and explore how the word ranking changes.\"\n    }), \"\\n\", _jsx(WindowScreenshot, {\n      src: \"/blog/2022-03-ldavis/2022-03-18_ldavis.png\",\n      width: \"888\",\n      height: \"634\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Grandmother from the topic 10 actually seems like it appears almost exlusively in this topic. Wolf, for example, is also characteristic of the topic, but it is quite frequent in the corpus in general.\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Siever and Shirley's LDAvis has another component, which shows marginal topic frequency in an MDS projection. Connect \", _jsx(_components.em, {\n        children: \"All Topics\"\n      }), \" output from Topic Modelling to \", _jsx(_components.strong, {\n        children: \"MDS\"\n      }), \". The widget will show topics in a 2D projection, where similar topics will lie close together and different topics far apart. Note that topic similarity is based on which words a characteristic of the topic.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Now set the Color and Size attributes to \", _jsx(_components.em, {\n        children: \"Marginal Topic Probability\"\n      }), \" and Label to \", _jsx(_components.em, {\n        children: \"Topics\"\n      }), \". Voila, this is a PCA-initiated MDS projection, where the size of the point corresponds to the marginal topic probability and the position of the point to its similarity with other topics.\"]\n    }), \"\\n\", _jsx(WindowScreenshot, {\n      src: \"/blog/2022-03-ldavis/2022-03-18_mds.png\",\n      width: \"1082\",\n      height: \"785\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Topic 4, which is about the fish, seems to be quite well-represented in the corpus.\"\n    }), \"\\n\", _jsx(WindowScreenshot, {\n      src: \"/blog/2022-03-ldavis/2022-03-18_workflow.png\",\n      width: \"710\",\n      height: \"254\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"This is it - a quick way to recreate LDAvis in Orange.\"\n    }), \"\\n\", _jsx(_components.h4, {\n      children: \"References\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Sievert, C. and K. E. Shirley. 2014. \\\"LDAvis: A method for visualizing and interpreting topics.\\\" Proceedings of the Workshop on Interactive Language Learning, Visualization, and Interfaces, pp. 63–70, Baltimore, Maryland, USA.\"\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n","frontmatter":{},"scope":{}}},"__N_SSG":true}