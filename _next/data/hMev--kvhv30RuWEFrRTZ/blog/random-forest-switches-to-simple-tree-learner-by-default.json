{"pageProps":{"frontmatter":{"author":"BIOLAB","date":"2011-12-08 15:28:00+00:00","draft":false,"title":"Random forest switches to Simple tree learner by default","blog":["forestlearner","simpletreelearner"],"oldUrl":"/blog/2011/12/08/random-forest-switches-to-simple-tree-learner-by-default/"},"content":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    strong: \"strong\",\n    pre: \"pre\",\n    code: \"code\",\n    img: \"img\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsxs(_components.p, {\n      children: [\"Random forest classifiers now use \", _jsx(_components.strong, {\n        children: \"Orange.classification.tree.SimpleTreeLearner\"\n      }), \"by default, which considerably shortens their construction times.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Using a random forest classifier is easy.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        children: \"\\timport Orange\\n\\n\\tiris = Orange.data.Table('iris')\\n\\tforest = Orange.ensemble.forest.RandomForestLearner(iris, trees=200)\\n\\tfor instance in iris:\\n\\t    print forest(instance), instance.get_class()\\n\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"The example above loads the iris dataset and trains a random forest classifier with 200 trees. The classifier is then used to label all training examples, printing its prediction alongside the actual class value.\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Using \", _jsx(_components.strong, {\n        children: \"SimpleTreeLearner\"\n      }), \" insted of \", _jsx(_components.strong, {\n        children: \"TreeLearner\"\n      }), \" substantially reduces the training time. The image below compares construction times of Random Forest classifiers using a SimpleTreeLearner or a TreeLearner as the base learner.\"]\n    }), \"\\n\", _jsx(_components.img, {\n      src: \"/blog/2011-12-random-forest-switches-to-simple-tree-learner-by-default/__webp-images__/forest_construction.png__600x641_q95_crop_upscale.webp\",\n      alt: \"\",\n      width: \"600\",\n      height: \"641\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"By setting the base_learner parameter to \", _jsx(_components.strong, {\n        children: \"TreeLearer\"\n      }), \" it is possible to revert to the original behaviour:\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        children: \"\\ttree_learner = Orange.classification.tree.TreeLearner()\\n\\tforest_orig = Orange.ensemble.forest.RandomForestLearner(base_learner=tree_learner)\\n\"\n      })\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}},"thumbImage":null},"__N_SSG":true}