{"pageProps":{"frontmatter":{"author":"PRIMOZGODEC","date":"2016-08-12 12:45:36+00:00","draft":false,"title":"Interactive k-Means","type":"blog","blog":["addons","clustering","education","gsoc","gsoc2016","orange3","widget"]},"content":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    em: \"em\",\n    a: \"a\",\n    ol: \"ol\",\n    li: \"li\",\n    img: \"img\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.p, {\n      children: _jsx(_components.em, {\n        children: \"This is a guest blog from the Google Summer of Code project.\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"As a part of my \", _jsx(_components.a, {\n        href: \"https://summerofcode.withgoogle.com/\",\n        children: \"Google Summer of Code\"\n      }), \" project I started developing educational widgets and assemble them in an \", _jsx(_components.a, {\n        href: \"http://orange3-educational.readthedocs.io/\",\n        children: \"Educational Add-On\"\n      }), \" for \", _jsx(_components.a, {\n        href: \"http://orange.biolab.si\",\n        children: \"Orange\"\n      }), \". Educational widgets can be used by students to understand how some key data mining algorithms work and by teachers to demonstrate the working of these algorithms.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Here I describe an educational widget for interactive \", _jsxs(_components.a, {\n        href: \"https://en.wikipedia.org/wiki/K-means_clustering\",\n        children: [_jsx(_components.em, {\n          children: \"k\"\n        }), \"-means clustering\"]\n      }), \", an algorithm that splits the data into clusters by finding cluster centroids such that the distance between data points and their corresponding centroid is minimized. Number of clusters in \", _jsx(_components.em, {\n        children: \"k\"\n      }), \"-means algorithm is denoted with \", _jsx(_components.em, {\n        children: \"k\"\n      }), \" and has to be specified manually.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"The algorithm starts by randomly positioning the centroids in the data space, and then improving their position by repetition of the following two steps:\"\n    }), \"\\n\", _jsxs(_components.ol, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"Assign each point to the closest centroid.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Move centroids to the mean position of points assigned to the centroid.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The widget needs the data that can come from \", _jsx(_components.a, {\n        href: \"http://orange3.readthedocs.io/en/latest/widgets/data/file.html\",\n        children: \"File\"\n      }), \" widget, and outputs the information on clusters (Annotated Data) and centroids:\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.img, {\n        src: \"/blog/2016-08-interactive-k-means/kmans_shema.png\",\n        alt: \"\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Educational widget for k-means works finds clusters based on two continuous features only, all other features are ignored. The screenshot shows plot of an Iris data set and clustering with \", _jsx(_components.em, {\n        children: \"k\"\n      }), \"=3. That is partially cheating, because we know that iris data set has three classes, so that we can check if clusters correspond well to original classes:\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.img, {\n        src: \"/blog/2016-08-interactive-k-means/kmeans2-stamped.png\",\n        alt: \"\"\n      })\n    }), \"\\n\", _jsxs(_components.ol, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [\"Select two features that are used in \", _jsx(_components.em, {\n          children: \"k\"\n        }), \"-means\"]\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Set number of centroids\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Randomize positions of centroids\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Show lines between centroids and corresponding points\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Perform the algorithm step by step. Reassign membership connects points to nearest centroid, Recompute centroids moves centroids.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Step back in the algorithm\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Set speed of automatic stepping\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Perform the whole algorithm as fast preview\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \" Anytime we can change number of centroids with spinner or with click in desired position in the graph.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"If we want to see the correspondence of clusters that are denoted by \", _jsx(_components.em, {\n        children: \"k\"\n      }), \"-means and classes, we can open \", _jsx(_components.em, {\n        children: \"Data Table\"\n      }), \" widget where we see that all \", _jsx(_components.em, {\n        children: \"Iris-setosas\"\n      }), \" are clustered in one cluster and but there are just few \", _jsx(_components.em, {\n        children: \"Iris-versicolor\"\n      }), \" that are classified is same cluster together with \", _jsx(_components.em, {\n        children: \"Iris-virginica\"\n      }), \" and vice versa.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.img, {\n        src: \"/blog/2016-08-interactive-k-means/kmeans3-4.png\",\n        alt: \"\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Interactive k-means works great in combination with \", _jsx(_components.a, {\n        href: \"http://orange3.readthedocs.io/en/latest/widgets/data/paintdata.html\",\n        children: \"Paint Data\"\n      }), \". There, we can design data sets where k-mains fails, and observe why.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.img, {\n        src: \"/blog/2016-08-interactive-k-means/kmeans-failt.png\",\n        alt: \"\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"We could also design data sets where k-means fails under specific initialization of centroids. Ah, I did not tell you that you can freely move the centroids and then restart the algorithm. Below we show the case of centroid initialization and how this leads to non-optimal clustering.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.img, {\n        src: \"/blog/2016-08-interactive-k-means/kmeans-f-join.png\",\n        alt: \"\"\n      })\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}},"__N_SSG":true}