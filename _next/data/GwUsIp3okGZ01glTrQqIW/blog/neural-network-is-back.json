{"pageProps":{"frontmatter":{"author":"AJDA","date":"2017-11-03 12:40:06+00:00","draft":false,"title":"Neural Network is Back!","type":"blog","blog":["classification","neuralnetwork","orange3","regression","widget"]},"content":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    a: \"a\",\n    img: \"img\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.p, {\n      children: \"We know you've missed it. We've been getting many requests to bring back Neural Network widget, but we also had many reservations about it.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Neural networks are powerful and great, but to do them right is not straight-forward. And to do them right in the context of a GUI-based visual programming tool like Orange is a twisted double helix of a roller coaster.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Do we make each layer a widget and then stack them? Do we use parallel processing or try to do something server-side? Theano or Keras? Tensorflow perhaps?\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"We were so determined to do things properly, that after the n-th iteration we still had no clue what to actually do.\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Then one day a silly novice programmer (a.k.a. me) had enough and just threw scikit-learn's \", _jsx(_components.a, {\n        href: \"http://scikit-learn.org/stable/modules/neural_networks_supervised.html\",\n        children: \"Multi-layer Perceptron model\"\n      }), \" into a widget and called it a day. There you go. A Neural Network widget just like it was in Orange2 - a wrapper for a scikit's function that works out-of-the-box. Nothing fancy, nothing powerful, but it does its job. It models things and it predicts things.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Just like that:\"\n    }), \"\\n\", _jsx(_components.img, {\n      src: \"/blog/2017-11-neural-network-is-back/Screen-Shot-2017-11-03-at-13.32.28.webp\",\n      alt: \"\",\n      width: \"562\",\n      height: \"280\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Have fun with the new widget!\"\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}},"__N_SSG":true}