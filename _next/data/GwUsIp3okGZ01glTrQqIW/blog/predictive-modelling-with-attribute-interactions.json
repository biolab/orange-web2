{"pageProps":{"frontmatter":{"author":"Noah Nov≈°ak","date":"2022-05-13","draft":false,"title":"Predictive Modelling with Attribute Interactions","type":"blog","thumbImage":"2022-05-06-interactions.png","frontPageImage":"2022-05-06-interactions.png","blog":["orange","interaction","addons"],"shortExcerpt":"A quick introduction to using the new Interactions widget in Orange 3","longExcerpt":"The Interactions widget has been added back to Orange 3. Illustrating how to use attribute interactions to improve predictive models.","x2images":true},"content":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    em: \"em\",\n    a: \"a\",\n    code: \"code\"\n  }, _provideComponents(), props.components), {WindowScreenshot} = _components;\n  if (!WindowScreenshot) _missingMdxReference(\"WindowScreenshot\", true);\n  return _jsxs(_Fragment, {\n    children: [_jsxs(_components.p, {\n      children: [\"The \", _jsx(_components.em, {\n        children: \"Interactions\"\n      }), \" widget is one of the newest additions to Orange. Previously only available in Orange 2, it has been rewritten and is accessible in the prototype add-on. This way, one need not go through the trouble of \", _jsx(_components.a, {\n        href: \"/blog/2022/2022-01-10-orange2/\",\n        children: \"compiling older versions\"\n      }), \" anymore.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"But what does it do?\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"It computes and displays the \", _jsx(_components.a, {\n        href: \"http://stat.columbia.edu/~jakulin/Int/\",\n        children: \"interaction\"\n      }), \" between attributes by calculating the mutual information between them and a third target variable. Doing so provides insight into the data at hand and aids in the search for better visualizations and predictive models.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"As far as visualizations go, consider \", _jsx(_components.a, {\n        href: \"/widget-catalog/visualize/scatterplot/\",\n        children: \"Scatter Plot\"\n      }), \". Connecting Interactions to the \", _jsx(_components.em, {\n        children: \"Features\"\n      }), \" input allows the user to manually select the projection, similarly to the \", _jsx(_components.em, {\n        children: \"find informative projections\"\n      }), \" button, but with a little more oomph. Enabling sorting, filtering, attribute selection, and offering a clear view into, where the information is coming from, be it from one single feature or a specific combination.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Another, possibly even more intriguing application would be, as mentioned, improving the performance of prediction models. To illustrate, let's take a look at the \", _jsx(_components.em, {\n        children: \"MONK\"\n      }), \" dataset, readily available directly within Orange, in the \", _jsx(_components.a, {\n        href: \"/widget-catalog/data/datasets/\",\n        children: \"Datasets\"\n      }), \" widget. First, we can try and see how well a Naive Bayes Classifier (NBC) can predict the target variable like so.\"]\n    }), \"\\n\", _jsx(WindowScreenshot, {\n      src: \"/blog/2022-04-interactions/2022-05-06-interactions-workflow.png\",\n      width: \"1067\",\n      height: \"454\",\n      src: \"/blog/2022-04-interactions/2022-05-06-interactions-workflow.webp\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Taking, for example, the Area Under Curve (AUC) score of \", _jsx(_components.code, {\n        children: \"0.741\"\n      }), \" as a  baseline, we can see that, already, our model performs quite well. But we know we can do better than that! We want to see what makes the model tick, so let's take a closer look at our data by utilizing the new interactions widget in our workflow and examining the results.\"]\n    }), \"\\n\", _jsx(WindowScreenshot, {\n      src: \"/blog/2022-04-interactions/2022-05-06-interactions.png\",\n      width: \"1200\",\n      height: \"800\",\n      src: \"/blog/2022-04-interactions/2022-05-06-interactions.webp\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"While neither \", _jsx(_components.code, {\n        children: \"a\"\n      }), \" nor \", _jsx(_components.code, {\n        children: \"b\"\n      }), \" carries much information independently, their combination tells a great deal about our target variable. With this in mind, we can now use the \", _jsx(_components.a, {\n        href: \"/widget-catalog/transform/featureconstructor/\",\n        children: \"Feature Constructor\"\n      }), \" widget to combine attributes \", _jsx(_components.code, {\n        children: \"a\"\n      }), \" and \", _jsx(_components.code, {\n        children: \"b\"\n      }), \" into a single feature and retrain our model. Applying all these steps then yields a workflow resembling this.\"]\n    }), \"\\n\", _jsx(WindowScreenshot, {\n      src: \"/blog/2022-04-interactions/2022-05-06-interactions-updated-workflow.png\",\n      width: \"1058\",\n      height: \"458\",\n      src: \"/blog/2022-04-interactions/2022-05-06-interactions-updated-workflow.webp\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Lo and behold! It looks like the extra trouble has paid off. We have managed to improve our model's performance and have ended up with an AUC score of \", _jsx(_components.code, {\n        children: \"1.0\"\n      }), \" by accounting for the codependence of variables (something models such as NBC lack by definition).\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"I hope this short display sheds some light on all the possibilities interaction analysis provides and urge you to try it out on some real-world data.\"\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n","frontmatter":{},"scope":{}}},"__N_SSG":true}