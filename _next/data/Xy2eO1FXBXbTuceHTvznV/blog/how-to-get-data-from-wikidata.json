{"pageProps":{"frontmatter":{"author":"Janez Demšar","date":"2025-04-20","draft":false,"title":"How to get data from Wikidata?","thumbImage":"Zastava_850_f.jpg","frontPageImage":"Zastava_850_f.jpg","blog":["data"],"shortExcerpt":"My new hobby: creating data sets from Wikidata. With some help from ChatGPT.","longExcerpt":"My new hobby: creating data sets from Wikidata. With some help from ChatGPT."},"content":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    a: \"a\",\n    h2: \"h2\",\n    strong: \"strong\",\n    pre: \"pre\",\n    code: \"code\",\n    span: \"span\"\n  }, _provideComponents(), props.components), {WindowScreenshot} = _components;\n  if (!WindowScreenshot) _missingMdxReference(\"WindowScreenshot\", true);\n  return _jsxs(_Fragment, {\n    children: [_jsxs(_components.p, {\n      children: [_jsx(_components.a, {\n        href: \"https://pumice.si/\",\n        children: \"Pumice\"\n      }), \" is a project in which we create school lesson plans for teaching data mining. Our good ideas are often impeded by the lack of data sets: you want to do something about cars, but you don't have a suitable ready-made data on UCI, Kaggle or anywhere else.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Wikipedia is a great source of information, but not of data. Machine-readable data, that is. For that, we need to turn to \", _jsx(_components.a, {\n        href: \"https://www.wikidata.org/\",\n        children: \"Wikidata\"\n      }), \", the sister project of Wikipedia.\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Fičo\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Fičo (pronounced like \\\"feecho\\\") is a nickname for a small car, officially called Zastava 750. It's a version of Fiat 600, produced in the former Yugoslavia. This was one of the (more or less) two cars I'd see in my childhood.\"\n    }), \"\\n\", _jsx(WindowScreenshot, {\n      src: \"/blog/2025-04-getting-data-from-wikidata/Zastava_850_f.jpg\",\n      width: \"1024\",\n      height: \"768\",\n      src: \"/blog/2025-04-getting-data-from-wikidata/__optimized-images__/Zastava_850_f.jpg\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Open the Wikipedia page for \", _jsx(_components.a, {\n        href: \"https://en.wikipedia.org/wiki/Zastava_750\",\n        children: \"Zastava 750\"\n      }), \". Not just for curiosity. See the \\\"Tools\\\" menu on the top right? Open and select \\\"Wikidata item\\\". This will open the \", _jsx(_components.a, {\n        href: \"https://www.wikidata.org/wiki/Q148237\",\n        children: \"Wikidata page\"\n      }), \" for Zastava 750. Scroll through it.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Q148237 is the entity ID representing the Zastava 750. Among the relationships, it says, for example, that Q148237 is an \\\"instance of\\\" Q3231690, where Q3231690 is \\\"automobile model.\\\" In other words, it says that the Zastava 750 is a car. It also says that its weight is 605 kg, it is \\\"followed by\\\" Q21205906, which is the Yugo, 923,847 of them were made, and so on.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"All of this is incredibly interesting, and we can gather it in the form of JSON ... but for our use, we will need data about multiple things of the same kind, for example, multiple cars. We can access the database from which this page is built through SPARQL.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"You know how to write SPARQL queries? Me neither. This is a query language for graphs. This is where ChatGPT comes in.\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.strong, {\n        children: \"You should never ask large language models to provide data\"\n      }), \" (at least not at the time of writing this blog). But you can ask it to help you get the data:\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        children: \"Can you construct a wikidata query for car\\nimages that would give me a picture, model name,\\nmanufacturer and state, and the year the car was\\nproduced?\\n\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"It answered:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        children: \"Sure! Here is a SPARQL query for Wikidata that\\nretrieves images of cars along with their model\\nname, manufacturer, production start year, and\\ncountry of origin (state). You can run this query\\nusing the [Wikidata Query Service].\\n\"\n      })\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"hljs language-sparql\",\n        children: \"SELECT ?car ?carLabel ?image ?manufacturerLabel ?countryLabel ?startYear WHERE {\\n  ?car wdt:P31 wd:Q3231690;  # Instance of automobile model\\n       wdt:P18 ?image;        # Image\\n       wdt:P176 ?manufacturer; # Manufacturer\\n       wdt:P571 ?inception.   # Inception (start year)\\n\\n  OPTIONAL {\\n    ?manufacturer wdt:P17 ?country.  # Manufacturer's country of origin\\n  }\\n\\n  BIND(YEAR(?inception) AS ?startYear)\\n\\n  FILTER(?startYear >= 1920)  # Filter cars produced from 1920 onwards\\n\\n  SERVICE wikibase:label { \\n    bd:serviceParam wikibase:language \\\"en\\\". \\n  }\\n}\\nORDER BY ?startYear\\nLIMIT 100\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"We then open the link to the Wikidata Query Service, \", _jsx(_components.a, {\n        href: \"https://query.wikidata.org/\",\n        children: \"https://query.wikidata.org/\"\n      }), \", and paste the query above into it. In response, we get a table that starts like this:\"]\n    }), \"\\n\", _jsx(WindowScreenshot, {\n      src: \"/blog/2025-04-getting-data-from-wikidata/tabela-avti.png\",\n      width: \"1970\",\n      height: \"1068\",\n      src: \"/blog/2025-04-getting-data-from-wikidata/__optimized-images__/tabela-avti.png\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"If we like it, we can delete LIMIT 100 (or leave it as is), and we’ll get all the results.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Then, under Download, we can choose JSON or TSV or whatever format we prefer, and we’ll get the table. CSV, for example, will look like this:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"hljs language-csv\",\n        children: \"car,carLabel,image,manufacturerLabel,countryLabel,startYear\\nhttp://www.wikidata.org/entity/Q1647218,Rumpler Tropfenwagen,http://commons.wikimedia.org/wiki/Special:FilePath/Rumpler%20Tropfenwagen.jpg,Rumpler,,1921\\nhttp://www.wikidata.org/entity/Q1071289,Chevrolet Superior,http://commons.wikimedia.org/wiki/Special:FilePath/1926%20Chevrolet%20Superior%20Series%20V%20Touring%20GAG685.jpg,General Motors,United States,1923\\nhttp://www.wikidata.org/entity/Q1071111,Chevrolet Copper-Cooled,http://commons.wikimedia.org/wiki/Special:FilePath/Chevrolet%20cooper%20cooled%20car.jpg,General Motors,United States,1923\\nhttp://www.wikidata.org/entity/Q51562081,Voisin Laboratoire,http://commons.wikimedia.org/wiki/Special:FilePath/Voisin-C6-Laboratoire%20%281923%29.jpg,Avions Voisin,France,1923\\nhttp://www.wikidata.org/entity/Q412232,Ajax,http://commons.wikimedia.org/wiki/Special:FilePath/1926%20Ajax%204-door%20built%20by%20Nash%20at%202014%20Gettysburg%20AACA%20meet-01.jpg,Nash Motors,United States,1925\\n\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"This was an example with cars. Sometimes, the table from Wikidata will be enough for us — we’ll just make a few minor adjustments, import it into Orange (or wherever else), and use it.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Other times, we’ll need to process it further, for example in Python. Would you like to grab all these images from the web? You know how to write a script for it... if not, chatGPT is perfectly suited for such tasks as a programmer.\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Sitcoms\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"I haven't done anything useful with the data about cars yet, but here's an example of a dataset I created for a lesson plan: it's a \", _jsx(_components.a, {\n        href: \"https://pumice.si/en/cartoons/\",\n        children: \"school activity about recommender systems\"\n      }), \". I had a version for children, which was about cartoons, and we wanted one with sitcoms that we can use with older kids and for training teachers.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"For this I used just ChatGPT, not Wikidata.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        children: \"Give me a list of sixty popular sitcoms as\\na Python list containing links to IMDB.\\n\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"The point here is that I requested the list in Python format: this made it easier to continue. I got this:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-python\",\n        children: [\"sitcoms = [\\n    {\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"title\\\"\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"Friends\\\"\"\n        }), \",\\n\\t \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"imdb_link\\\"\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"https://www.imdb.com/title/tt0108778/\\\"\"\n        }), \"},\\n    {\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"title\\\"\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"Seinfeld\\\"\"\n        }), \",\\n\\t \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"imdb_link\\\"\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"https://www.imdb.com/title/tt0098904/\\\"\"\n        }), \"},\\n    {\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"title\\\"\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"The Office (US)\\\"\"\n        }), \",\\n\\t \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"imdb_link\\\"\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"https://www.imdb.com/title/tt0386676/\\\"\"\n        }), \"},\\n    {\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"title\\\"\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"Parks and Recreation\\\"\"\n        }), \",\\n\\t \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"imdb_link\\\"\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"https://www.imdb.com/title/tt1266020/\\\"\"\n        }), \"},\\n\"]\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Here, one must be cautious. Among the links ChatGPT provided, three or four were incorrect — they pointed to completely different series. \", _jsx(_components.strong, {\n        children: \"ChatGPT is not a reliable data source\"\n      }), \", but here it was easy to catch its mistakes in the next step.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"For the educational activity I was preparing, I wanted posters of those series. When I asked:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        children: \"What's the easiest way to download poster images?\\nI want to do it programmatically.\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"It told me about the Open Movie Database (\", _jsx(_components.a, {\n        href: \"https://www.omdbapi.com/\",\n        children: \"https://www.omdbapi.com/\"\n      }), \"). It has an API that requires your email to which it sends you a key, with which you can make up to 1000 requests per day.\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        children: \"Given an IMDb tt code, and assuming my\\napikey is 12345, how do I download from\\nomdb using Python and urllib.request?\\n\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"It gave me this:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-python\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"import\"\n        }), \" urllib.request\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"import\"\n        }), \" json\\n\\n\", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"# Define your API key and IMDb tt code\"\n        }), \"\\napi_key = \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"12345\\\"\"\n        }), \"\\ntt_code = \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"tt0111161\\\"\"\n        }), \"  \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"# Example IMDb code for The Shawshank Redemption\"\n        }), \"\\n\\n\", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"# Construct the URL for the OMDb API\"\n        }), \"\\nurl = \", _jsxs(_components.span, {\n          className: \"hljs-string\",\n          children: [\"f\\\"http://www.omdbapi.com/?apikey=\", _jsx(_components.span, {\n            className: \"hljs-subst\",\n            children: \"{api_key}\"\n          }), \"&i=\", _jsx(_components.span, {\n            className: \"hljs-subst\",\n            children: \"{tt_code}\"\n          }), \"\\\"\"]\n        }), \"\\n\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"try\"\n        }), \":\\n    \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"# Make the request\"\n        }), \"\\n    \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"with\"\n        }), \" urllib.request.urlopen(url) \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"as\"\n        }), \" response:\\n        \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"# Read and decode the response\"\n        }), \"\\n        data = response.read().decode(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"utf-8\\\"\"\n        }), \")\\n        \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"# Parse the JSON\"\n        }), \"\\n        movie_data = json.loads(data)\\n        \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"# Output the result\"\n        }), \"\\n        \", _jsx(_components.span, {\n          className: \"hljs-built_in\",\n          children: \"print\"\n        }), \"(movie_data)\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"except\"\n        }), \" Exception \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"as\"\n        }), \" e:\\n    \", _jsx(_components.span, {\n          className: \"hljs-built_in\",\n          children: \"print\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"An error occurred:\\\"\"\n        }), \", e)\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"And that was it. :)\"\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n","frontmatter":{},"scope":{}},"thumbImage":{"width":1024,"height":768,"src":"/blog/2025-04-getting-data-from-wikidata/__optimized-images__/Zastava_850_f.jpg"}},"__N_SSG":true}