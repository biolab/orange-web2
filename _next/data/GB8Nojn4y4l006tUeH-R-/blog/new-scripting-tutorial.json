{"pageProps":{"frontmatter":{"author":"BLAZ","date":"2013-01-06 19:30:00+00:00","draft":false,"title":"New scripting tutorial","type":"blog","blog":["documentation","examples","tutorial"]},"content":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    a: \"a\",\n    pre: \"pre\",\n    code: \"code\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsxs(_components.p, {\n      children: [\"Orange just got a new, completely rewritten \", _jsx(_components.a, {\n        href: \"http://docs.biolab.si/orange/2/tutorial/rst/index.html\",\n        children: \"scripting tutorial\"\n      }), \". The tutorial uses Orange class hierarchy as introduced for version 2.5. The tutorial is supposed to be a gentle introduction in Orange scripting. It includes many examples, from really simple ones to those more complex. To give you a hint about the later, here is the code for learner with feature subset selection from:\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        children: \"    class SmallLearner(Orange.classification.PyLearner):\\n        def __init__(self, base_learner=Orange.classification.bayes.NaiveLearner,\\n                     name='small', m=5):\\n            self.name = name\\n            self.m   = m\\n            self.base_learner = base_learner\\n\\n        def __call__(self, data, weight=None):\\n            gain = Orange.feature.scoring.InfoGain()\\n            m = min(self.m, len(data.domain.features))\\n            best = [f for _, f in sorted((gain(x, data), x) \\\\\\n              for x in data.domain.features)[-m:]]\\n            domain = Orange.data.Domain(best + [data.domain.class_var])\\n\\n            model = self.base_learner(Orange.data.Table(domain, data), weight)\\n            return Orange.classification.PyClassifier(classifier=model, name=self.name)\\n\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"The tutorial was first written for Python 2.3. Since, Python and Orange have changed a lot. And so did I. Most of the for loops have become one-liners, list and dictionary comprehension have become a must, and many new and great libraries have emerged. The (boring) tutorial code that used to read\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        children: \"        c = [0] * len(data.domain.classVar.values)\\n        for e in data:\\n            c[int(e.getclass())] += 1\\n        print \\\"Instances: \\\", len(data), \\\"total\\\",\\n        r = [0.] * len(c)\\n        for i in range(len(c)):\\n            r[i] = c[i] * 100. / len(data)\\n        for i in range(len(data.domain.classVar.values)):\\n            print \\\", %d(%4.1f%s) with class %s\\\" % \\n                (c[i], r[i], '%', data.domain.classVar.values[i]),\\n        print\\n\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"is now replaced with\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        children: \"    print Counter(str(d.get_class()) for d in data)\\n\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Ok. Pretty print is missing, but that, if not in the same line, could be done in another one.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"For now, the tutorial focuses on data input and output, classification and regression. We plan to use other sections, but you can also give us a hint if there are any you would wish to be included.\"\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}},"__N_SSG":true}