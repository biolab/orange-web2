{"pageProps":{"frontmatter":{"author":"AJDA","date":"2015-08-07 13:57:49+00:00","draft":false,"title":"Creating a new data table in Orange through Python","blog":["data","examples","python"],"oldUrl":"/blog/2015/08/07/creating-a-new-data-table-in-orange-through-python/"},"content":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    strong: \"strong\",\n    pre: \"pre\",\n    code: \"code\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.p, {\n      children: _jsx(_components.strong, {\n        children: \"IMPORT DATA\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"One of the first tasks in Orange data analysis is of course loading your data. If you are using Orange through Python, this is as easy as riding a bike:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        children: \"    import Orange\\n    data = Orange.data.Table(“iris”)\\n    print (data)\\n\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"This will return a neat data table of the famous Iris data set in the console.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.strong, {\n        children: \"CREATE YOUR OWN DATA TABLE\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"What if you want to create your own data table from scratch? Even this is surprisingly simple. First, import the Orange data library.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        children: \"    from Orange.data import *\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Set all the attributes you wish to see in your data table. For discrete attributes call \", _jsx(_components.strong, {\n        children: \"DiscreteVariable\"\n      }), \" and set the name and the possible values, while for a continuous variable call \", _jsx(_components.strong, {\n        children: \"ContinuousVariable\"\n      }), \" and set only the attribute name.\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        children: \"    color = DiscreteVariable(“color”, values=[“orange”, “green”, “yellow”])\\n    \\n    calories = ContinuousVariable(“calories”)\\n    \\n    fiber = ContinuousVariable(“fiber”)]\\n    \\n    fruit = DiscreteVariable(\\\"fruit”, values=[”orange\\\", “apple”, “peach”])\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Then set the domain for your data table. See how we set class variable with \", _jsx(_components.strong, {\n        children: \"class_vars\"\n      }), \"?\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        children: \"    domain = Domain([color, calories, fiber], class_vars=fruit)\\n\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Time to input your data!\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        children: \"    data = Table(domain, [\\n    \\n    [“green”, 4, 1.2, “apple”],\\n    \\n    [\\\"orange\\\", 5, 1.1, \\\"orange\\\"],\\n    \\n    [\\\"yellow\\\", 4, 1.0, \\\"peach\\\"]])\\n\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"And now print what you have created!\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        children: \"    print(data)\\n\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"One final step:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        children: \"    Table.save(table, \\\"fruit.tab\\\")\\n\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Your data is safely stored to your computer (in the Python folder)! Good job!\"\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}},"__N_SSG":true}