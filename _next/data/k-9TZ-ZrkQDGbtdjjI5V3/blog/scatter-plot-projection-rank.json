{"pageProps":{"frontmatter":{"author":"AJDA","date":"2015-08-28 14:05:07+00:00","draft":false,"title":"Scatter Plot Projection Rank","type":"blog","blog":["orange3","visualization","widget"]},"content":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    strong: \"strong\",\n    img: \"img\",\n    em: \"em\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsxs(_components.p, {\n      children: [\"One of the nicest and surely most useful visualization widgets in Orange is \", _jsx(_components.strong, {\n        children: \"Scatter Plot\"\n      }), \". The widget displays a 2-D plot, where x and y-axes are two attributes from the data.\"]\n    }), \"\\n\", _jsx(_components.img, {\n      src: \"/blog/2015-08-scatter-plot-projection-rank/ScatterPlot1.png\",\n      alt: \"\",\n      width: \"777\",\n      height: \"708\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"2-dimensional scatter plot visualization\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Orange 2.7 has a wonderful functionality called \", _jsx(_components.strong, {\n        children: \"VizRank\"\n      }), \", that is now implemented also in Orange 3. \", _jsx(_components.strong, {\n        children: \"Rank Projections\"\n      }), \" functionality enables you to find interesting attribute pairs by scoring their average classification accuracy. Click ‘\", _jsx(_components.em, {\n        children: \"Start Evaluation\"\n      }), \"’ to begin ranking.\"]\n    }), \"\\n\", _jsx(_components.img, {\n      src: \"/blog/2015-08-scatter-plot-projection-rank/ScatterPlot2.png\",\n      alt: \"\",\n      width: \"396\",\n      height: \"326\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Rank Projections before ranking is performed.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"The functionality will also instantly adapt the visualization to the best scored pair. Select other pairs from the list to compare visualizations.\"\n    }), \"\\n\", _jsx(_components.img, {\n      src: \"/blog/2015-08-scatter-plot-projection-rank/ScatterPlot3.png\",\n      alt: \"\",\n      width: \"396\",\n      height: \"326\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Rank Projections once the attribute pairs are scored.\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Rank suggested \", _jsx(_components.em, {\n        children: \"petal length\"\n      }), \" and \", _jsx(_components.em, {\n        children: \"petal width\"\n      }), \" as the best pair and indeed, the visualization below is much clearer (better separated).\"]\n    }), \"\\n\", _jsx(_components.img, {\n      src: \"/blog/2015-08-scatter-plot-projection-rank/ScatterPlot4.png\",\n      alt: \"\",\n      width: \"777\",\n      height: \"708\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Scatter Plot once the visualization is optimized.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Have fun trying out this and other visualization widgets!\"\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}},"__N_SSG":true}