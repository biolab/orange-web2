{"pageProps":{"frontmatter":{"author":"AJDA","date":"2015-08-14 12:31:57+00:00","draft":false,"title":"Classifying instances with Orange in Python","blog":["classification","data","examples","orange3","python","tree"]},"content":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    strong: \"strong\",\n    a: \"a\",\n    pre: \"pre\",\n    code: \"code\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsxs(_components.p, {\n      children: [\"Last week we showed you how to create your own data table in Python shell. Now we’re going to take you a step further and show you how to easily \", _jsx(_components.strong, {\n        children: \"classify data\"\n      }), \" with Orange.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"First we’re going to create a \", _jsx(_components.a, {\n        href: \"/blog/2015/08/07/creating-a-new-data-table-in-orange-through-python/\",\n        children: \"new data table\"\n      }), \" with 10 fruits as our instances.\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        children: \"    import Orange\\n    from Orange.data import *\\n    \\n    color = DiscreteVariable(\\\"color\\\", values=[\\\"orange\\\", \\\"green\\\", \\\"yellow\\\"])calories = ContinuousVariable(\\\"calories\\\")\\n    fiber = ContinuousVariable(\\\"fiber\\\")\\n    fruit = DiscreteVariable(\\\"fruit\\\", values=[\\\"orange\\\", \\\"apple\\\", \\\"peach\\\"])\\n    \\n    domain = Domain([color, calories, fiber], class_vars=fruit)\\n    \\n    data=Table(domain, [</span>\\n    [\\\"green\\\", 4, 1.2, \\\"apple\\\"], \\n    [\\\"orange\\\", 5, 1.1, \\\"orange\\\"],\\n    [\\\"yellow\\\", 4, 1.0, \\\"peach\\\"],\\n    [\\\"orange\\\", 4, 1.1, \\\"orange\\\"],\\n    [\\\"yellow\\\", 4, 1.1,\\\"peach\\\"],\\n    [\\\"green\\\", 5, 1.3, \\\"apple\\\"],\\n    [\\\"green\\\", 4, 1.3, \\\"apple\\\"],\\n    [\\\"orange\\\", 5, 1.0, \\\"orange\\\"],\\n    [\\\"yellow\\\", 4.5, 1.3, \\\"peach\\\"],\\n    [\\\"green\\\", 5, 1.0, \\\"orange\\\"]])\\n    \\n    print(data)\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Now we have to select a model for classification. Among the many learners in Orange library, we decided to use the \", _jsx(_components.strong, {\n        children: \"Tree Learner\"\n      }), \" for this example. Since we’re dealing with fruits, we thought it’s only appropriate. :)\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Let’s create a learning algorithm and use it to induce the classifier from the data.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        children: \"    tree_learner = Orange.classification.TreeLearner()\\n    tree = tree_learner(data)\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Now we can predict what variety \", _jsx(_components.strong, {\n        children: \"a green fruit\"\n      }), \" with \", _jsx(_components.strong, {\n        children: \"3.5 calories\"\n      }), \" and \", _jsx(_components.strong, {\n        children: \"2g of fiber\"\n      }), \" is with the help of our model. To do this, simply call the model and use a list of new data as argument.\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        children: \"    print(tree([\\\"green\\\", 3.5, 2]))\\n\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Python returns index as a result:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        children: \"    1\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"To check the index, we can call \", _jsx(_components.strong, {\n        children: \"class variable\"\n      }), \" values with the corresponding index:\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        children: \"    domain.class_var.values[1]\\n\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Final result:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        children: \"    \\\"apple\\\"\\n\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"You can use your own data set to see how this model works for different data types. Let us know how it goes! :)\"\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}},"__N_SSG":true}