{"pageProps":{"frontmatter":{"author":"AJDA","date":"2018-04-23 08:34:47+00:00","draft":false,"title":"Installing Add-ons Works Again","blog":["addons","download","pypi","release","update"]},"content":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    code: \"code\",\n    a: \"a\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.p, {\n      children: \"Dear Orange users,\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Some of you might have an issue installing add-ons with the following issue popping up:\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.code, {\n        children: \"xmlrpc.client.Fault: <Fault -32601: 'server error; requested method not found'>\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"This is the result of the migration to a new infrastructure at \", _jsx(_components.a, {\n        href: \"https://pypi.org/\",\n        children: \"PyPi\"\n      }), \", which provides the installation of add-ons. Our team has rallied to adjust the add-on installer so it works with the new and improved service.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"In order to make the add-on installer work (again), please \", _jsx(_components.a, {\n        href: \"https://orange.biolab.si/download/\",\n        children: \"download\"\n      }), \" the latest version of Orange (3.13.0).\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"We apologize for any inconvenience and wish you a fruitful data analysis in the future.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Yours truly,\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Orange team\"\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}},"__N_SSG":true}