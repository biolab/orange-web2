{"pageProps":{"frontmatter":{"author":"BIOLAB","date":"2011-09-02 05:47:00+00:00","draft":false,"title":"GSoC Review: Multi-label Classification Implementation","blog":["classification","gsoc","multilabel"],"oldUrl":"/blog/2011/09/02/gsoc-review-multi-label-classification-implementation/"},"content":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    strong: \"strong\",\n    em: \"em\",\n    a: \"a\",\n    h3: \"h3\",\n    h4: \"h4\",\n    ul: \"ul\",\n    li: \"li\",\n    pre: \"pre\",\n    code: \"code\",\n    span: \"span\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsxs(_components.p, {\n      children: [\"Traditional single-label classification is concerned with learning from a set of examples that are associated with a single label \", _jsx(_components.strong, {\n        children: \"l\"\n      }), \" from a set of disjoint labels \", _jsx(_components.strong, {\n        children: \"L\"\n      }), \", \", _jsx(_components.strong, {\n        children: \"|L|\"\n      }), \" > \", _jsx(_components.strong, {\n        children: \"1\"\n      }), \". If \", _jsx(_components.strong, {\n        children: \"|L|\"\n      }), \" = \", _jsx(_components.strong, {\n        children: \"2\"\n      }), \", then the learning problem is called a binary classification problem, while if \", _jsx(_components.strong, {\n        children: \"|L|\"\n      }), \" > \", _jsx(_components.strong, {\n        children: \"2\"\n      }), \", then it is called a multi-class classification problem (Tsoumakas & Katakis, 2007).\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Multi-label classification methods are increasingly used by many applications, such as textual data classification, protein function classification, music categorization and semantic scene classification. However, currently, Orange can only handle single-label problems. As a result, the project \", _jsx(_components.em, {\n        children: \"Multi-label classification Implementation\"\n      }), \" has been proposed to extend Orange to support multi-label.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"We can group the existing methods for multi-label classification into two main categories: a) problem transformation method, and b) algorithm adaptation methods. In the former one, multi-label problems are converted to single-label, and then the traditional binary classification can apply; in the latter case, methods directly classify the multi-label data, instead.\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"In this project, two transformation methods and two algorithm adaptation methods are implemented. Along with the methods, their widgets are also added. As the evaluation metrics for multi-label data are different from the single-label ones, new evaluation measures are supported. The code is available in \", _jsx(_components.a, {\n        href: \"http://orange.biolab.si/trac/intertrac/browser%3Abranches/multilabel\",\n        children: \"SVN branch\"\n      }), \".\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Fortunately, benefiting from the Tab file format, the \", _jsx(_components.strong, {\n        children: \"ExampleTable\"\n      }), \" can store multi-label data without any modification. Now, we can add a special value – \", _jsx(_components.strong, {\n        children: \"label\"\n      }), \" into the \", _jsx(_components.strong, {\n        children: \"attributes\"\n      }), \" dictionary of the domain with value 1. In this way, if the attribute description has the keyword \", _jsx(_components.strong, {\n        children: \"label\"\n      }), \", then it is a label; otherwise, it is a normal feature.\"]\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"What have been done in this project\"\n    }), \"\\n\", _jsx(_components.h4, {\n      children: \"Transformation methods\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"br – Binary Relevance Learner (Tsoumakas & Katakis, 2007)\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"lp – Label Powerset Classification (Tsoumakas & Katakis, 2007)\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h4, {\n      children: \"Algorithm Adaptation methods\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"mlknn – Multi-kNN Classification (Zhang & Zhou, 2007)\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"brknn – BR-kNN Classification (Spyromitros et al. 2008)\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h4, {\n      children: \"Evaluation methods\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"mlc_hamming_loss – Example-based Hamming Loss (Schapire and Singer 2000)\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"mlc_accuracy, mlc_precision, mlc_recall – Example-based accuracy, precision, recall (Godbole & Sarawagi, 2004)\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h4, {\n      children: \"Widgets\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"OWBR – Widget for Binary Relevance Learner\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"OWLP – Widget for Label Powerset Classification\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"OWMLkNN – Widget for Multi-kNN Classification\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"OWBRkNN – Widget for BR-kNN Classification\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"OWTestLearner – Widget for Evaluation\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h4, {\n      children: \"File Format Extension\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"extend the loadARFF function to support sparse Weka format\"\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"new support \", _jsx(_components.a, {\n          href: \"http://mulan.sourceforge.net/format.html\",\n          children: \"mulan xml and arff format\"\n        })]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Plan for the future\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"add more classification methods for multi-label, such as PT1 to PT6\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"add feature extraction method\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"add ranking-based evaluation methods\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"How to use\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Basically, the way to use multi-label classification and evaluation is nearly the same as the single-label ones. The only difference between them is the different types of input data.\"\n    }), \"\\n\", _jsx(_components.h4, {\n      children: \"Example for Classification\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-python\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"import\"\n        }), \" Orange\\n\\ndata = Orange.data.Table(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"emotions.tab\\\"\"\n        }), \")\\n\\nclassifier = Orange.multilabel.BinaryRelevanceLearner(data)\\n\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"for\"\n        }), \" e \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"in\"\n        }), \" data:\\n    c,p = classifier(e,Orange.classification.Classifier.GetBoth)\\n    \", _jsx(_components.span, {\n          className: \"hljs-built_in\",\n          children: \"print\"\n        }), \" c,p\\n\\npowerset_cliassifer = Orange.multilabel.LabelPowersetLearner(data)\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"for\"\n        }), \" e \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"in\"\n        }), \" data:\\n    c,p = powerset_cliassifer(e,Orange.classification.Classifier.GetBoth)\\n    \", _jsx(_components.span, {\n          className: \"hljs-built_in\",\n          children: \"print\"\n        }), \" c,p\\n\\nmlknn_cliassifer = Orange.multilabel.MLkNNLearner(data,k=\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"1\"\n        }), \")\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"for\"\n        }), \" e \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"in\"\n        }), \" data:\\n    c,p = mlknn_cliassifer(e,Orange.classification.Classifier.GetBoth)\\n    \", _jsx(_components.span, {\n          className: \"hljs-built_in\",\n          children: \"print\"\n        }), \" c,p\\n\\nbr_cliassifer = Orange.multilabel.BRkNNLearner(data,k=\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"1\"\n        }), \")\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"for\"\n        }), \" e \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"in\"\n        }), \" data:\\n    c,p = br_cliassifer(e,Orange.classification.Classifier.GetBoth)\\n    \", _jsx(_components.span, {\n          className: \"hljs-built_in\",\n          children: \"print\"\n        }), \" c,p\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.h4, {\n      children: \"Example for Evaluation\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-python\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"import\"\n        }), \" Orange\\n\\nlearners = [\\n    Orange.multilabel.BinaryRelevanceLearner(name=\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"br\\\"\"\n        }), \"),\\n    Orange.multilabel.BinaryRelevanceLearner(name=\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"br\\\"\"\n        }), \", \\\\\\n        base_learner=Orange.classification.knn.kNNLearner),\\n    Orange.multilabel.LabelPowersetLearner(name=\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"lp\\\"\"\n        }), \"),\\n    Orange.multilabel.LabelPowersetLearner(name=\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"lp\\\"\"\n        }), \", \\\\\\n        base_learner=Orange.classification.knn.kNNLearner),\\n    Orange.multilabel.MLkNNLearner(name=\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"mlknn\\\"\"\n        }), \",k=\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"5\"\n        }), \"),\\n    Orange.multilabel.BRkNNLearner(name=\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"brknn\\\"\"\n        }), \",k=\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"5\"\n        }), \"),\\n]\\n\\ndata = Orange.data.Table(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"emotions.xml\\\"\"\n        }), \")\\n\\nres = Orange.evaluation.testing.cross_validation(learners, data,\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"2\"\n        }), \")\\nloss = Orange.evaluation.scoring.mlc_hamming_loss(res)\\naccuracy = Orange.evaluation.scoring.mlc_accuracy(res)\\nprecision = Orange.evaluation.scoring.mlc_precision(res)\\nrecall = Orange.evaluation.scoring.mlc_recall(res)\\n\", _jsx(_components.span, {\n          className: \"hljs-built_in\",\n          children: \"print\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'loss='\"\n        }), \", loss\\n\", _jsx(_components.span, {\n          className: \"hljs-built_in\",\n          children: \"print\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'accuracy='\"\n        }), \", accuracy\\n\", _jsx(_components.span, {\n          className: \"hljs-built_in\",\n          children: \"print\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'precision='\"\n        }), \", precision\\n\", _jsx(_components.span, {\n          className: \"hljs-built_in\",\n          children: \"print\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'recall='\"\n        }), \", recall\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"References\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [\"G. Tsoumakas and I. Katakis. \", _jsx(_components.em, {\n          children: \"Multi-label classification: An overview\\\". International Journal of Data Warehousing and Mining, 3(3):1-13, 2007.\"\n        })]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"E. Spyromitros, G. Tsoumakas, and I. Vlahavas, \", _jsx(_components.em, {\n          children: \"An Empirical Study of Lazy Multilabel Classification Algorithms\"\n        }), \". Proc. 5th Hellenic Conference on Artificial Intelligence (SETN 2008), Springer, Syros, Greece, 2008.\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"M. Zhang and Z. Zhou. \", _jsx(_components.em, {\n          children: \"ML-KNN: A lazy learning approach to multi-label learning\"\n        }), \". Pattern Recognition, 40, 7 (Jul. 2007), 2038-2048.\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"S. Godbole and S. Sarawagi. \", _jsx(_components.em, {\n          children: \"Discriminative Methods for Multi-labeled Classification\"\n        }), \", Proceedings of the 8th Pacific-Asia Conference on Knowledge Discovery and Data Mining, PAKDD 2004.\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"R. E. Schapire and Y. Singer. \", _jsx(_components.em, {\n          children: \"Boostexter: a bossting-based system for text categorization\"\n        }), \", Machine Learning, vol.39, no.2/3, 2000, pp:135-68.\"]\n      }), \"\\n\"]\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}},"thumbImage":null},"__N_SSG":true}