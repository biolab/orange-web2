{"pageProps":{"frontmatter":{"author":"BIOLAB","date":"2011-12-20 12:22:00+00:00","draft":false,"title":"Earth - Multivariate adaptive regression splines","blog":["regression"],"oldUrl":"/blog/2011/12/20/earth-multivariate-adaptive-regression-splines/"},"content":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    a: \"a\",\n    pre: \"pre\",\n    code: \"code\",\n    img: \"img\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsxs(_components.p, {\n      children: [\"There have recently been some additions to the lineup of Orange learners. One of these is Orange.regression.earth.EarthLearner. It is an Orange interface to the \", _jsx(_components.a, {\n        href: \"http://www.milbo.users.sonic.net/earth/\",\n        children: \"Earth\"\n      }), \" library written by Stephen Milborrow implementing \", _jsx(_components.a, {\n        href: \"http://en.wikipedia.org/wiki/Multivariate_adaptive_regression_splines\",\n        children: \"Multivariate adaptive regression splines\"\n      }), \".\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"So lets take it out for a spin on a simple toy dataset (\", _jsx(_components.a, {\n        href: \"http://blog.biolab.si/wp-content/uploads/2011/12/13/data.tab\",\n        children: \"data.tab\"\n      }), \" - created using the Paint Data widget in the Orange Canvas):\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        children: \"    import Orange\\n    from Orange.regression import earth\\n    import numpy\\n    from matplotlib import pylab as pl\\n\\n    data = Orange.data.Table(\\\"data.tab\\\")\\n    earth_predictor = earth.EarthLearner(data)\\n\\n    X, Y = data.to_numpy(\\\"A/C\\\")\\n\\n    pl.plot(X, Y, \\\".r\\\")\\n\\n    linspace = numpy.linspace(min(X), max(X), 20)\\n    predictions = [earth_predictor([s, \\\"?\\\"]) for s in linspace]\\n\\n    pl.plot(linspace, predictions, \\\"-b\\\")\\n    pl.show()\\n\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"which produces the following plot:\"\n    }), \"\\n\", _jsx(_components.img, {\n      src: \"/blog/2011-12-earth-multivariate-adaptive-regression-splines/__optimized-images__/earth_demo_2.png\",\n      alt: \"\",\n      width: \"600\",\n      height: \"470\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"We can also print the model representation using\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        children: \"    print earth_predictor\\n\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"which outputs:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        children: \"    Y =\\n       1.013\\n       +1.198 * max(0, X - 0.485)\\n       -1.803 * max(0, 0.485 - X)\\n       -1.321 * max(0, X - 0.283)\\n       -1.609 * max(0, X - 0.640)\\n       +1.591 * max(0, X - 0.907)\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"See \", _jsx(_components.a, {\n        href: \"https://orange-multitarget.readthedocs.io/en/0.9.2/Orange.regression.earth.html\",\n        children: \"Orange.regression.earth reference\"\n      }), \" for full documentation.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"(Edit: Added link to the dataset file)\"\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}},"thumbImage":null},"__N_SSG":true}